%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%--
%-- Ralf Hemmecke's xname extension for Hyperlatex
%-- Copyright (C) 2002 Ralf Hemmecke <ralf@hemmecke.de>
%--
%-- $Id: rhxxname.hlx,v 1.2 2005/03/10 01:16:23 tomfool Exp $
%--
%-- This package is build on Hyperlatex 2.6 by Otfried Cheong.
%--
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%--
%-- This program is free software; you can redistribute it and/or modify
%-- it under the terms of the GNU General Public License as published by
%-- the Free Software Foundation; either version 2 of the License, or
%-- (at your option) any later version.
%--
%-- This program is distributed in the hope that it will be useful,
%-- but WITHOUT ANY WARRANTY; without even the implied warranty of
%-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%-- GNU General Public License for more details.
%--
%-- You should have received a copy of the GNU General Public License
%-- along with this program; if not, write to the Free Software
%-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\typeout{Ralf Hemmecke's Hyperlatex 2.6 xname extension}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-- A bit of history...
%--
%-- I would like to mention this little piece of code (thank you, Tom)
%-- since this was the starting point of my adventure to extend the
%-- user's control over generated filenames AND directories.
%--
%-- I realised that Hyperlatex would generate a file DirA/File.html in
%-- case I put \xname{DirA/File} just before a \section command and
%-- the directory DirA existed, but would fail in case the directory
%-- DirA was not already there.
%
%Date: Mon, 14 Oct 2002 03:55:32 -0400
%From: tom sgouros <tomfool@as220.org>
%Subject: Re: [hyperlatex] Hyperlatex extension
%
%RH> Wouldn't it be nice if hyperlatex could also generate
%RH> directory trees and put the files there in case I have such
%RH> an \xname as above.
%
%I'm not able to test this today, but something like the 
%following might work.  Put it inside an \HlxEval{} macro. 
\HlxEval{
(defun hyperlatex-format-xname ()
  (if hyperlatex-final-pass
      (hyperlatex-parse-required-argument)
  ;else
      (let* ((node-name (hyperlatex-parse-required-argument))
            (node-directory (file-name-directory node-name)))
          (if node-directory ;-- we must create a directory
              (progn
              ;-- Create new dir under hyperlatex-html-directory.
              ;-- We assume that hyperlatex-html-directory is not nil
              ;-- and not empty. It should be at least "." (which is
              ;-- the default).
              (setq node-directory
                  (concat hyperlatex-html-directory "/" node-directory))

              (if (not (file-exists-p node-directory))
                  (progn 
                  (hyperlatex-message "Making directory %s" node-directory)
                  (make-directory node-directory t)))))

          (setq hyperlatex-node-names
              (cons (cons (1+ hyperlatex-node-number)
                          (format "%s%s" node-name hyperlatex-html-ext))
                    hyperlatex-node-names)))))
}




%-- This code worked immediately, but the problem was to adapt the
%-- links. So this is what is achieved with the following code.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-- The function hyperlatex-relative-prefix extracts information from
%-- the global variable hyperlatex-node-number (which is the node
%-- currently treated). In fact hyperlatex-fullname returns the name
%-- as given in the \xname command but with the html extension
%-- appended. So we get a string of the form "DirA/DirB/File.html". 
%-- This function strips File.html and replaces DirA and DirB by .. so
%-- that the returned string would be "../../". In fact, such a string
%-- is necessary to be appended to relative links of the current node
%-- so that the correct URL is generated.
%--
%-- The function hyperlatex-relative-fullname returns the fullname of
%-- the respective node with the prefix prepended.
\HlxEval{
(defun hyperlatex-relative-prefix ()
  (setq hyperlatex-rel-prefix "")
  (setq rhx-tmp (hyperlatex-fullname hyperlatex-node-number))
  (while (string-match "/" rhx-tmp)
    (setq rhx-tmp (replace-match "" t t rhx-tmp))
    (setq hyperlatex-rel-prefix (concat hyperlatex-rel-prefix "../" )))
  hyperlatex-rel-prefix)

(defun hyperlatex-relative-fullname (node-number)
  (concat (hyperlatex-relative-prefix) (hyperlatex-fullname node-number)))
}


%-- We must redefine several functions from hyperlatex.el so that they
%-- use the relative name.
%-- It should also be possible to redefine hyperlatex-fullname and
%-- change other functions that need the original behaviour.
\HlxEval{
(defun hyperlatex-format-hlxprevurl ()
  (let ((node (hyperlatex-prev-node hyperlatex-node-section)))
    (if node
        (insert (hyperlatex-relative-fullname (hyperlatex-sect-node node))))))

(defun hyperlatex-format-hlxupurl ()
  (let ((node (hyperlatex-up-node hyperlatex-node-section)))
    (if node
        (insert (hyperlatex-relative-fullname (hyperlatex-sect-node node))))))

(defun hyperlatex-format-hlxnexturl ()
  (let ((node (hyperlatex-next-node hyperlatex-node-section)))
    (if node
        (insert (hyperlatex-relative-fullname (hyperlatex-sect-node node))))))

(defun hyperlatex-format-hlxbackurl ()
  (let ((node (hyperlatex-back-node hyperlatex-node-section)))
    (if node
        (insert (hyperlatex-relative-fullname (hyperlatex-sect-node node))))))
  
(defun hyperlatex-format-hlxforwurl ()
  (let ((node (hyperlatex-forw-node hyperlatex-node-section)))
    (if node
        (insert (hyperlatex-relative-fullname (hyperlatex-sect-node node))))))

(defun hyperlatex-gen-url (label-node label-number &optional current)
  "Generates a URL for a label in NODE with NUMBER. If node is the same as the
CURRENT node, simply returns `#LABEL', else returns `NAME#LABEL', unless
NUMBER is zero, in which case the returned url is `NAME`.
CURRENT is optional, and defaults to the current node."
  (if (zerop label-number)
      (hyperlatex-relative-fullname label-node)
    (format "%s#%s"
            (if (= (if current current hyperlatex-node-number) label-node)
                ""
              (hyperlatex-relative-fullname label-node))
            (hyperlatex-label-string label-number label-node))))

;;--rhx: 24-Aug-2004: modified from hyperlatex.el 2.7
(defun hyperlatex-format-img ()
  (let ((url (hyperlatex-parse-required-argument))
        (alt (hyperlatex-purify (hyperlatex-parse-evaluated-argument
                                 hyperlatex-special-chars-regexp))))
    ;rhx: added the following line
    (setq url (concat (hyperlatex-relative-prefix) url))
    (hyperlatex-gen (concat (hyperlatex-get-attributes "img")
                            " alt=" hyperlatex-meta-dq
                            alt hyperlatex-meta-dq 
                            " src=" hyperlatex-meta-dq 
                            url hyperlatex-meta-dq))
    (goto-char hyperlatex-command-start)))

(defun hyperlatex-format-gif ()
  (let* ((opt (hyperlatex-parse-optional-argument))
         (tags (if opt opt ""))
         (resolution (hyperlatex-parse-optional-argument))
         (dpi (hyperlatex-parse-optional-argument))
         (url (hyperlatex-parse-required-argument))
         (hyperlatex-imagetype "gif"))
    ;rhx: added the following line
    (setq url (concat (hyperlatex-relative-prefix) url))
    (delete-region hyperlatex-command-start
                   (progn (search-forward "\\end{gif}") (point)))
    (hyperlatex-delete-whitespace)
    (hyperlatex-pop-stacks)
    (hyperlatex-gen
     (format (concat "img src=" hyperlatex-meta-dq "%s." 
                     hyperlatex-imagetype hyperlatex-meta-dq " %s /")
             url tags))))

(defun hyperlatex-format-image ()
  (let* ((opt (hyperlatex-parse-optional-argument))
         (tags (if opt opt ""))
         (resolution (hyperlatex-parse-optional-argument))
         (dpi (hyperlatex-parse-optional-argument))
         (url (hyperlatex-parse-required-argument)))
    ;rhx: added the following line
    (setq url (concat (hyperlatex-relative-prefix) url))
    (delete-region hyperlatex-command-start
                   (progn (search-forward "\\end{image}") (point)))
    (hyperlatex-delete-whitespace)
    (hyperlatex-pop-stacks)
    (hyperlatex-gen
     (format (concat "img src=" hyperlatex-meta-dq "%s." 
                     hyperlatex-imagetype hyperlatex-meta-dq " %s /")
             url tags))))
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-- In order to have a way to refer to the top entry node of the
%-- document we introduce the command \HlxTopNodeUrl which can be used
%-- like \HlxPrevUrl, \HlxNextUrl, usw. The command \HlxHomeUrl is by
%-- default defined as
%--   \newcommand{\HlxHomeUrl}{\HlxTopNodeUrl}
%-- and used for the link underlying the HOME button. Redefine it as
%-- you need.
%--
%-- Maybe this should go into a package `home.hlx' or find its way
%-- into the Hyperlatex code.
\HlxEval{
(put 'HlxTopNodeUrl     'hyperlatex 'hyperlatex-format-hlxtopnodeurl)
(defun hyperlatex-format-hlxtopnodeurl ()
  "Return the URL of the entry point (home) relative to the current place"
  (insert (concat (hyperlatex-relative-prefix)
          hyperlatex-basename (hyperlatex-html-ext))))

}
\newcommand{\HlxHomeUrl}{\HlxTopNodeUrl}






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-- Also the place of the buttons (icons) has to be made relative. 
%-- Well, in fact, we want to have the follwing behaviour. If the
%-- given place of the icons (as given through the new command
%-- \HlxSetIcons) starts with "http:" then no relative prefix is added. 
%-- Otherwise, we prepend a certain path of the form "../../" to go
%-- back from the directory of the current node.

%--rhx: hyperlatex-format-img is not changed. I just reuse code.
\HlxEval{
(defvar hyperlatex-icons-url "")
(defvar hyperlatex-icons-url-absolute-p nil)
(put 'HlxSetIcons 'hyperlatex 'hyperlatex-icons)
(defun hyperlatex-icons ()
  "Parses the argument and appends / to the URL if necessary. Set the global variables hyperlatex-icons-url and hyperlatex-icons-url-absolute."
  (setq hyperlatex-icons-url (hyperlatex-parse-evaluated-argument
                                  hyperlatex-special-chars-regexp))
  (if (and (> (length hyperlatex-icons-url) 0)
           (not (string= (substring hyperlatex-icons-url -1) "/")))
    (setq hyperlatex-icons-url (concat hyperlatex-icons-url "/")))
    (setq hyperlatex-icons-url-absolute-p 
      (and (> (length hyperlatex-icons-url) 4)
           (string= (substring hyperlatex-icons-url 0 5) "http:"))))

(defun hyperlatex-format-img-url (url)
  "Just an auxiliary function"
  (let ((alt (hyperlatex-purify (hyperlatex-parse-evaluated-argument
                                 hyperlatex-special-chars-regexp))))
    (hyperlatex-gen (concat (hyperlatex-get-attributes "img")
                            " alt=" hyperlatex-meta-dq
                            alt hyperlatex-meta-dq 
                            " src=" hyperlatex-meta-dq 
                            url hyperlatex-meta-dq))
    (goto-char hyperlatex-command-start)))

(defun hyperlatex-format-img ()
  (hyperlatex-format-img-url (hyperlatex-parse-required-argument)))


(put 'htmlicon 'hyperlatex 'hyperlatex-format-icon)
(defun hyperlatex-format-icon ()
  (let* ((url (concat hyperlatex-icons-url 
                      (hyperlatex-parse-required-argument))))
  (hyperlatex-format-img-url 
      (if hyperlatex-icons-url-absolute-p url
          (concat (hyperlatex-relative-prefix) url)))))
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%EMACS Local Variables:
%EMACS mode: latex
%EMACS End:
